name: Download jawiki

on:
  schedule:
    - cron: "17 17 6,21 * *"
  workflow_dispatch:

env:
  RELEASE_API: https://api.github.com/repos/nakanishi123/wikipedia-golf/releases/latest

jobs:
  make-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix-json: ${{ steps.make-matrix.outputs.matrix-json }}
      matrix-json-only-1: ${{ steps.make-matrix.outputs.matrix-json-only-1 }}
    steps:
      - name: Make matrix
        id: make-matrix
        run: |
          SETTING='[
            {
                "name": "jawiki-latest-redirect",
                "matrix": 1
            },
            {
                "name": "jawiki-latest-page",
                "matrix": 1
            },
            {
                "name": "jawiki-latest-pagelinks",
                "matrix": 16
            },
            {
                "name": "jawiki-latest-linktarget",
                "matrix": 1
            },
            {
                "name": "jawiki-latest-categorylinks",
                "matrix": 4
            }]'
            
            output=$(
            echo $SETTING | jq -c '.[]' | 
            while read -r item; do
              name=$(echo "$item" | jq -r '.name')
              matrix=$(echo "$item" | jq '.matrix')
              for i in $(seq 1 "$matrix"); do
                jq -n --arg name "$name" --argjson matrix "$matrix" --argjson i "$i" \
                '{"file": "\($name).sql.gz", "rss": "\($name).sql.gz-rss.xml", "sqlite": "\($name).sqlite", "total-matrix": $matrix, "matrix-num": $i}'
              done
            done | jq -s -c '.'
            )

            echo "matrix-json=${output}" >> $GITHUB_OUTPUT
            echo "matrix-json-only-1=$(echo $output | jq -c '[.[] | select(.["matrix-num"] == 1)]')" >> $GITHUB_OUTPUT

  download:
    needs: make-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        files: ${{fromJson(needs.make-matrix.outputs.matrix-json-only-1)}}
    steps:
      - uses: actions/checkout@v4

      - name: Get cache previous pubDate
        uses: actions/cache/restore@v4
        with:
          path: prevPubDate.txt
          key: ${{matrix.files.file}}-prevPubDate.txt

      - name: Get RSS pubDate and set UPDATED
        run: |
          PUB_DATE=$(
            wget -q -O - https://dumps.wikimedia.org/jawiki/latest/${{matrix.files.rss}} | 
            awk -F'<pubDate>|</pubDate>' '{if ($2 != "") print $2}'
          )
          echo "PUB_DATE=$PUB_DATE" >> $GITHUB_ENV

          PREV_PUB_DATE=$(cat prevPubDate.txt 2>/dev/null || echo 'ðŸ˜Š')
          if [ "$PREV_PUB_DATE" != "$PUB_DATE" ]; then
            echo "UPDATED=UPDATED" >> $GITHUB_ENV
          else
            echo "UPDATED=" >> $GITHUB_ENV # empty if false
          fi

      - name: Make release_body.rtxt (For Release Body)
        run: |
          echo "| ${{matrix.files.file}} | ${{env.PUB_DATE}} | ${{env.UPDATED}} |" >> release_body.rtxt.${{matrix.files.file}}

      - name: Download
        if: ${{env.UPDATED}}
        run: |
          wget -q -O temp.sql.gz https://dumps.wikimedia.org/jawiki/latest/${{matrix.files.file}}

      - name: Upload temp.sql.gz (${{matrix.files.file}}-temp.sql.gz)
        if: ${{env.UPDATED}}
        uses: actions/upload-artifact@v4
        with:
          name: ${{matrix.files.file}}-temp.sql.gz
          path: temp.sql.gz

      - name: Upload release_body.rtxt
        uses: actions/upload-artifact@v4
        with:
          name: release_body.rtxt.${{matrix.files.file}}
          path: release_body.rtxt.${{matrix.files.file}}

      - name: Save temp pubDate
        run: echo ${{env.PUB_DATE}} > prevPubDate.txt

      - name: Save cache temp pubDate
        uses: actions/cache/save@v4
        with:
          path: prevPubDate.txt
          key: ${{matrix.files.file}}-temp-prevPubDate.txt

  mysql2sqlite:
    needs: [make-matrix, download]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        files: ${{fromJson(needs.make-matrix.outputs.matrix-json)}}
    steps:
      - uses: actions/checkout@v4

      - name: Download temp.sql.gz
        uses: actions/download-artifact@v4
        with:
          pattern: ${{matrix.files.file}}-temp.sql.gz
          merge-multiple: true

      - name: Check temp.sql.gz
        run: |
          if [ -f temp.sql.gz ]; then
            echo "UPDATED=True" >> $GITHUB_ENV
          else
            echo "UPDATED=" >> $GITHUB_ENV
          fi

      - name: Extract
        if: ${{env.UPDATED}}
        run: |
          7z x temp.sql.gz
          rm temp.sql.gz

      - uses: actions/setup-python@v5
        if: ${{env.UPDATED}}
        with:
          python-version: "3.12"

      - name: Install dependencies for python mysql2sqlite
        if: ${{env.UPDATED}}
        run: |
          pip install mysql-to-sqlite3
          sudo apt-get update
          sudo apt-get install pv

      - name: Start MySQL
        if: ${{env.UPDATED}}
        uses: shogo82148/actions-setup-mysql@v1
        with:
          mysql-version: "9.0"
          root-password: root
          my-cnf: |
            skip_innodb_doublewrite
            disable_log_bin
            innodb_log_writer_threads=OFF
            innodb_dedicated_server=ON
            innodb_flush_log_at_trx_commit=2
            sync_binlog=0

      - name: Split SQL file
        if: ${{env.UPDATED}}
        run: |
          awk '!/^INSERT INTO/ || (row++ % ${{matrix.files.total-matrix}} + 1) == ${{matrix.files.matrix-num}} { print > "do.sql" }' temp.sql
          rm temp.sql

      - name: Import SQL Dump into MySQL
        if: ${{env.UPDATED}}
        run: |
          mysql -u root -proot -e "CREATE DATABASE IF NOT EXISTS jawiki;"
          pv -f do.sql | mysql -u root -proot jawiki
          rm do.sql

      - name: Export MySQL Database to SQLite and Clean Up
        if: ${{env.UPDATED}}
        run: |
          mysql2sqlite -f ${{matrix.files.matrix-num}}.sqlite -d jawiki -u root --mysql-password root
          mysql -u root -proot -e "DROP DATABASE jawiki;"

      - name: Upload splited sqlite
        if: ${{env.UPDATED}}
        uses: actions/upload-artifact@v4
        with:
          name: ${{matrix.files.sqlite}}.splited.sqlite${{matrix.files.matrix-num}}
          path: ${{matrix.files.matrix-num}}.sqlite

  merge-sqlite:
    needs: [make-matrix, mysql2sqlite]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        files: ${{fromJson(needs.make-matrix.outputs.matrix-json-only-1)}}
    steps:
      - name: Download splited sqlite
        uses: actions/download-artifact@v4
        with:
          pattern: ${{matrix.files.sqlite}}.splited.sqlite*
          path: splited
          merge-multiple: true

      - name: Check splited sqlite files
        run: |
          if find splited/ -type f | grep -q .; then
            echo "UPDATED=True" >> $GITHUB_ENV
          else
            echo "UPDATED=" >> $GITHUB_ENV
          fi

      - name: Check Disk Space (Debug)
        run: df -h

      - name: Merge sqlite
        if: ${{env.UPDATED}}
        run: |
          mv splited/1.sqlite 1.sqlite
          table=$(sqlite3 1.sqlite ".tables")

          shopt -s nullglob # Prevent error when no files
          for file in splited/*.sqlite; do
            sqlite3 1.sqlite "
              ATTACH '$file' AS temp_db;
              INSERT INTO $table SELECT * FROM temp_db.$table;
              DETACH DATABASE temp_db;
              "
            rm $file
            echo "Merged $file"
          done

          shopt -u nullglob
          mv 1.sqlite ${{matrix.files.sqlite}}

      - name: Compress and split
        if: ${{env.UPDATED}}
        run: |
          mkdir -p artifacts
          7z a ${{matrix.files.sqlite}}.7z ${{matrix.files.sqlite}}

          filesize=$(stat --format="%s" ${{matrix.files.sqlite}}.7z)
          if((filesize <= 2147483648)); then
            mv ${{matrix.files.sqlite}}.7z artifacts/
          else
            split --numeric-suffixes=1 -a 3 -b 2000m ${{matrix.files.sqlite}}.7z artifacts/${{matrix.files.sqlite}}.7z.
          fi

      - name: Download Release when not updated
        if: ${{!env.UPDATED}}
        run: |
          files=$(wget -qO- ${{env.RELEASE_API}} | jq -r '.assets[] | select(.name | startswith("${{matrix.files.sqlite}}")) | .browser_download_url')
          for file in $files; do
            wget -P artifacts $file
          done

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: compressed-sqlite-${{matrix.files.sqlite}}
          path: artifacts/*
          if-no-files-found: error

      - name: Get cache temp pubDate
        uses: actions/cache/restore@v4
        with:
          path: prevPubDate.txt
          key: ${{matrix.files.file}}-temp-prevPubDate.txt

      - name: Save cache pubDate
        uses: actions/cache/save@v4
        with:
          path: prevPubDate.txt
          key: ${{matrix.files.file}}-prevPubDate.txt

  release:
    needs: merge-sqlite
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout this repository
        uses: actions/checkout@v4

      - name: Get Date
        run: echo "DATE=$(TZ=JST-9 date '+%Y.%-m.%-d')" >> $GITHUB_ENV

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts/
          pattern: compressed-sqlite-*
          merge-multiple: true

      - name: Download Release Body
        uses: actions/download-artifact@v4
        with:
          path: release_bodies
          pattern: release_body.rtxt.*
          merge-multiple: true

      - name: Make Release Body
        run: |
          echo "RELEASE_TEXT<<EOF"            >> $GITHUB_ENV
          echo "## wikipedia jawiki"          >> $GITHUB_ENV
          echo ""                             >> $GITHUB_ENV
          echo "| File | Date | Updated |"    >> $GITHUB_ENV
          echo "| ---- | ---- | ------- |"    >> $GITHUB_ENV
          cat ./release_bodies/*              >> $GITHUB_ENV
          echo "EOF"                          >> $GITHUB_ENV

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.DATE }}
          name: ${{ env.DATE }}
          body: ${{ env.RELEASE_TEXT }}
          files: |
            ./artifacts/*
